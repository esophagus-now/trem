// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "trem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> trem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic trem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic trem::ap_const_logic_0 = sc_dt::Log_0;

trem::trem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Block_proc_U0 = new Block_proc("Block_proc_U0");
    Block_proc_U0->ap_clk(ap_clk);
    Block_proc_U0->ap_rst(ap_rst_n_inv);
    Block_proc_U0->ap_start(Block_proc_U0_ap_start);
    Block_proc_U0->ap_done(Block_proc_U0_ap_done);
    Block_proc_U0->ap_continue(Block_proc_U0_ap_continue);
    Block_proc_U0->ap_idle(Block_proc_U0_ap_idle);
    Block_proc_U0->ap_ready(Block_proc_U0_ap_ready);
    Block_proc_U0->in_V_TDATA(in_V_TDATA);
    Block_proc_U0->in_V_TVALID(in_V_TVALID);
    Block_proc_U0->in_V_TREADY(Block_proc_U0_in_V_TREADY);
    Block_proc_U0->ap_return(Block_proc_U0_ap_return);
    tremolo_calculation_U0 = new tremolo_calculation("tremolo_calculation_U0");
    tremolo_calculation_U0->ap_clk(ap_clk);
    tremolo_calculation_U0->ap_rst(ap_rst_n_inv);
    tremolo_calculation_U0->ap_start(tremolo_calculation_U0_ap_start);
    tremolo_calculation_U0->ap_done(tremolo_calculation_U0_ap_done);
    tremolo_calculation_U0->ap_continue(tremolo_calculation_U0_ap_continue);
    tremolo_calculation_U0->ap_idle(tremolo_calculation_U0_ap_idle);
    tremolo_calculation_U0->ap_ready(tremolo_calculation_U0_ap_ready);
    tremolo_calculation_U0->return_r(tremolo_calculation_U0_return_r);
    tremolo_calculation_U0->return_r_ap_vld(tremolo_calculation_U0_return_r_ap_vld);
    tremolo_calculation_U0->xin(trem_in_loc_channel_dout);
    Block_proc4_U0 = new Block_proc4("Block_proc4_U0");
    Block_proc4_U0->ap_clk(ap_clk);
    Block_proc4_U0->ap_rst(ap_rst_n_inv);
    Block_proc4_U0->ap_start(Block_proc4_U0_ap_start);
    Block_proc4_U0->ap_done(Block_proc4_U0_ap_done);
    Block_proc4_U0->ap_continue(Block_proc4_U0_ap_continue);
    Block_proc4_U0->ap_idle(Block_proc4_U0_ap_idle);
    Block_proc4_U0->ap_ready(Block_proc4_U0_ap_ready);
    Block_proc4_U0->trem_out(p_channel_dout);
    Block_proc4_U0->out_V_TDATA(Block_proc4_U0_out_V_TDATA);
    Block_proc4_U0->out_V_TVALID(Block_proc4_U0_out_V_TVALID);
    Block_proc4_U0->out_V_TREADY(out_V_TREADY);
    trem_in_loc_channel_U = new fifo_w32_d2_A("trem_in_loc_channel_U");
    trem_in_loc_channel_U->clk(ap_clk);
    trem_in_loc_channel_U->reset(ap_rst_n_inv);
    trem_in_loc_channel_U->if_read_ce(ap_var_for_const0);
    trem_in_loc_channel_U->if_write_ce(ap_var_for_const0);
    trem_in_loc_channel_U->if_din(Block_proc_U0_ap_return);
    trem_in_loc_channel_U->if_full_n(trem_in_loc_channel_full_n);
    trem_in_loc_channel_U->if_write(Block_proc_U0_ap_done);
    trem_in_loc_channel_U->if_dout(trem_in_loc_channel_dout);
    trem_in_loc_channel_U->if_empty_n(trem_in_loc_channel_empty_n);
    trem_in_loc_channel_U->if_read(tremolo_calculation_U0_ap_ready);
    p_channel_U = new fifo_w32_d2_A("p_channel_U");
    p_channel_U->clk(ap_clk);
    p_channel_U->reset(ap_rst_n_inv);
    p_channel_U->if_read_ce(ap_var_for_const0);
    p_channel_U->if_write_ce(ap_var_for_const0);
    p_channel_U->if_din(tremolo_calculation_U0_return_r);
    p_channel_U->if_full_n(p_channel_full_n);
    p_channel_U->if_write(tremolo_calculation_U0_ap_done);
    p_channel_U->if_dout(p_channel_dout);
    p_channel_U->if_empty_n(p_channel_empty_n);
    p_channel_U->if_read(Block_proc4_U0_ap_ready);

    SC_METHOD(thread_Block_proc4_U0_ap_continue);

    SC_METHOD(thread_Block_proc4_U0_ap_start);
    sensitive << ( p_channel_empty_n );

    SC_METHOD(thread_Block_proc4_U0_start_full_n);

    SC_METHOD(thread_Block_proc4_U0_start_write);

    SC_METHOD(thread_Block_proc_U0_ap_continue);
    sensitive << ( trem_in_loc_channel_full_n );

    SC_METHOD(thread_Block_proc_U0_ap_start);

    SC_METHOD(thread_Block_proc_U0_start_full_n);

    SC_METHOD(thread_Block_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_p_channel);
    sensitive << ( tremolo_calculation_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_trem_in_loc_channel);
    sensitive << ( Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_in_V_TREADY);
    sensitive << ( Block_proc_U0_in_V_TREADY );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( Block_proc4_U0_out_V_TDATA );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( Block_proc4_U0_out_V_TVALID );

    SC_METHOD(thread_tremolo_calculation_U0_ap_continue);
    sensitive << ( p_channel_full_n );

    SC_METHOD(thread_tremolo_calculation_U0_ap_start);
    sensitive << ( trem_in_loc_channel_empty_n );

    SC_METHOD(thread_tremolo_calculation_U0_start_full_n);

    SC_METHOD(thread_tremolo_calculation_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "trem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_V_TDATA, "(port)in_V_TDATA");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_V_TVALID, "(port)in_V_TVALID");
    sc_trace(mVcdFile, in_V_TREADY, "(port)in_V_TREADY");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, Block_proc_U0_ap_start, "Block_proc_U0_ap_start");
    sc_trace(mVcdFile, Block_proc_U0_ap_done, "Block_proc_U0_ap_done");
    sc_trace(mVcdFile, Block_proc_U0_ap_continue, "Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc_U0_ap_idle, "Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc_U0_ap_ready, "Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc_U0_in_V_TREADY, "Block_proc_U0_in_V_TREADY");
    sc_trace(mVcdFile, Block_proc_U0_ap_return, "Block_proc_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_trem_in_loc_channel, "ap_channel_done_trem_in_loc_channel");
    sc_trace(mVcdFile, trem_in_loc_channel_full_n, "trem_in_loc_channel_full_n");
    sc_trace(mVcdFile, tremolo_calculation_U0_ap_start, "tremolo_calculation_U0_ap_start");
    sc_trace(mVcdFile, tremolo_calculation_U0_ap_done, "tremolo_calculation_U0_ap_done");
    sc_trace(mVcdFile, tremolo_calculation_U0_ap_continue, "tremolo_calculation_U0_ap_continue");
    sc_trace(mVcdFile, tremolo_calculation_U0_ap_idle, "tremolo_calculation_U0_ap_idle");
    sc_trace(mVcdFile, tremolo_calculation_U0_ap_ready, "tremolo_calculation_U0_ap_ready");
    sc_trace(mVcdFile, tremolo_calculation_U0_return_r, "tremolo_calculation_U0_return_r");
    sc_trace(mVcdFile, tremolo_calculation_U0_return_r_ap_vld, "tremolo_calculation_U0_return_r_ap_vld");
    sc_trace(mVcdFile, ap_channel_done_p_channel, "ap_channel_done_p_channel");
    sc_trace(mVcdFile, p_channel_full_n, "p_channel_full_n");
    sc_trace(mVcdFile, Block_proc4_U0_ap_start, "Block_proc4_U0_ap_start");
    sc_trace(mVcdFile, Block_proc4_U0_ap_done, "Block_proc4_U0_ap_done");
    sc_trace(mVcdFile, Block_proc4_U0_ap_continue, "Block_proc4_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc4_U0_ap_idle, "Block_proc4_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc4_U0_ap_ready, "Block_proc4_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc4_U0_out_V_TDATA, "Block_proc4_U0_out_V_TDATA");
    sc_trace(mVcdFile, Block_proc4_U0_out_V_TVALID, "Block_proc4_U0_out_V_TVALID");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, trem_in_loc_channel_dout, "trem_in_loc_channel_dout");
    sc_trace(mVcdFile, trem_in_loc_channel_empty_n, "trem_in_loc_channel_empty_n");
    sc_trace(mVcdFile, p_channel_dout, "p_channel_dout");
    sc_trace(mVcdFile, p_channel_empty_n, "p_channel_empty_n");
    sc_trace(mVcdFile, Block_proc_U0_start_full_n, "Block_proc_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc_U0_start_write, "Block_proc_U0_start_write");
    sc_trace(mVcdFile, tremolo_calculation_U0_start_full_n, "tremolo_calculation_U0_start_full_n");
    sc_trace(mVcdFile, tremolo_calculation_U0_start_write, "tremolo_calculation_U0_start_write");
    sc_trace(mVcdFile, Block_proc4_U0_start_full_n, "Block_proc4_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc4_U0_start_write, "Block_proc4_U0_start_write");
#endif

    }
    mHdltvinHandle.open("trem.hdltvin.dat");
    mHdltvoutHandle.open("trem.hdltvout.dat");
}

trem::~trem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Block_proc_U0;
    delete tremolo_calculation_U0;
    delete Block_proc4_U0;
    delete trem_in_loc_channel_U;
    delete p_channel_U;
}

void trem::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void trem::thread_Block_proc4_U0_ap_continue() {
    Block_proc4_U0_ap_continue = ap_const_logic_1;
}

void trem::thread_Block_proc4_U0_ap_start() {
    Block_proc4_U0_ap_start = p_channel_empty_n.read();
}

void trem::thread_Block_proc4_U0_start_full_n() {
    Block_proc4_U0_start_full_n = ap_const_logic_0;
}

void trem::thread_Block_proc4_U0_start_write() {
    Block_proc4_U0_start_write = ap_const_logic_0;
}

void trem::thread_Block_proc_U0_ap_continue() {
    Block_proc_U0_ap_continue = trem_in_loc_channel_full_n.read();
}

void trem::thread_Block_proc_U0_ap_start() {
    Block_proc_U0_ap_start = ap_const_logic_1;
}

void trem::thread_Block_proc_U0_start_full_n() {
    Block_proc_U0_start_full_n = ap_const_logic_0;
}

void trem::thread_Block_proc_U0_start_write() {
    Block_proc_U0_start_write = ap_const_logic_0;
}

void trem::thread_ap_channel_done_p_channel() {
    ap_channel_done_p_channel = tremolo_calculation_U0_ap_done.read();
}

void trem::thread_ap_channel_done_trem_in_loc_channel() {
    ap_channel_done_trem_in_loc_channel = Block_proc_U0_ap_done.read();
}

void trem::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void trem::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void trem::thread_in_V_TREADY() {
    in_V_TREADY = Block_proc_U0_in_V_TREADY.read();
}

void trem::thread_out_V_TDATA() {
    out_V_TDATA = Block_proc4_U0_out_V_TDATA.read();
}

void trem::thread_out_V_TVALID() {
    out_V_TVALID = Block_proc4_U0_out_V_TVALID.read();
}

void trem::thread_tremolo_calculation_U0_ap_continue() {
    tremolo_calculation_U0_ap_continue = p_channel_full_n.read();
}

void trem::thread_tremolo_calculation_U0_ap_start() {
    tremolo_calculation_U0_ap_start = trem_in_loc_channel_empty_n.read();
}

void trem::thread_tremolo_calculation_U0_start_full_n() {
    tremolo_calculation_U0_start_full_n = ap_const_logic_0;
}

void trem::thread_tremolo_calculation_U0_start_write() {
    tremolo_calculation_U0_start_write = ap_const_logic_0;
}

void trem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"in_V_TDATA\" :  \"" << in_V_TDATA.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TVALID\" :  \"" << in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_V_TREADY\" :  \"" << in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

