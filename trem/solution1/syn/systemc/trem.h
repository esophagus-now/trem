// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _trem_HH_
#define _trem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc.h"
#include "tremolo_calculation.h"
#include "Block_proc4.h"
#include "fifo_w32_d2_A.h"

namespace ap_rtl {

struct trem : public sc_module {
    // Port declarations 8
    sc_in< sc_lv<32> > in_V_TDATA;
    sc_out< sc_lv<32> > out_V_TDATA;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > in_V_TVALID;
    sc_out< sc_logic > in_V_TREADY;
    sc_out< sc_logic > out_V_TVALID;
    sc_in< sc_logic > out_V_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    trem(sc_module_name name);
    SC_HAS_PROCESS(trem);

    ~trem();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_proc* Block_proc_U0;
    tremolo_calculation* tremolo_calculation_U0;
    Block_proc4* Block_proc4_U0;
    fifo_w32_d2_A* trem_in_loc_channel_U;
    fifo_w32_d2_A* p_channel_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Block_proc_U0_ap_start;
    sc_signal< sc_logic > Block_proc_U0_ap_done;
    sc_signal< sc_logic > Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_ready;
    sc_signal< sc_logic > Block_proc_U0_in_V_TREADY;
    sc_signal< sc_lv<32> > Block_proc_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_trem_in_loc_channel;
    sc_signal< sc_logic > trem_in_loc_channel_full_n;
    sc_signal< sc_logic > tremolo_calculation_U0_ap_start;
    sc_signal< sc_logic > tremolo_calculation_U0_ap_done;
    sc_signal< sc_logic > tremolo_calculation_U0_ap_continue;
    sc_signal< sc_logic > tremolo_calculation_U0_ap_idle;
    sc_signal< sc_logic > tremolo_calculation_U0_ap_ready;
    sc_signal< sc_lv<32> > tremolo_calculation_U0_return_r;
    sc_signal< sc_logic > tremolo_calculation_U0_return_r_ap_vld;
    sc_signal< sc_logic > ap_channel_done_p_channel;
    sc_signal< sc_logic > p_channel_full_n;
    sc_signal< sc_logic > Block_proc4_U0_ap_start;
    sc_signal< sc_logic > Block_proc4_U0_ap_done;
    sc_signal< sc_logic > Block_proc4_U0_ap_continue;
    sc_signal< sc_logic > Block_proc4_U0_ap_idle;
    sc_signal< sc_logic > Block_proc4_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_proc4_U0_out_V_TDATA;
    sc_signal< sc_logic > Block_proc4_U0_out_V_TVALID;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_lv<32> > trem_in_loc_channel_dout;
    sc_signal< sc_logic > trem_in_loc_channel_empty_n;
    sc_signal< sc_lv<32> > p_channel_dout;
    sc_signal< sc_logic > p_channel_empty_n;
    sc_signal< sc_logic > Block_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_proc_U0_start_write;
    sc_signal< sc_logic > tremolo_calculation_U0_start_full_n;
    sc_signal< sc_logic > tremolo_calculation_U0_start_write;
    sc_signal< sc_logic > Block_proc4_U0_start_full_n;
    sc_signal< sc_logic > Block_proc4_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Block_proc4_U0_ap_continue();
    void thread_Block_proc4_U0_ap_start();
    void thread_Block_proc4_U0_start_full_n();
    void thread_Block_proc4_U0_start_write();
    void thread_Block_proc_U0_ap_continue();
    void thread_Block_proc_U0_ap_start();
    void thread_Block_proc_U0_start_full_n();
    void thread_Block_proc_U0_start_write();
    void thread_ap_channel_done_p_channel();
    void thread_ap_channel_done_trem_in_loc_channel();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_in_V_TREADY();
    void thread_out_V_TDATA();
    void thread_out_V_TVALID();
    void thread_tremolo_calculation_U0_ap_continue();
    void thread_tremolo_calculation_U0_ap_start();
    void thread_tremolo_calculation_U0_start_full_n();
    void thread_tremolo_calculation_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
