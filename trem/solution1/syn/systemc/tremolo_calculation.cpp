// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "tremolo_calculation.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic tremolo_calculation::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic tremolo_calculation::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state1 = "1";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state2 = "10";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state3 = "100";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state4 = "1000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state5 = "10000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state6 = "100000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state7 = "1000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state8 = "10000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state9 = "100000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state10 = "1000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state11 = "10000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state12 = "100000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<31> tremolo_calculation::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> tremolo_calculation::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> tremolo_calculation::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> tremolo_calculation::ap_const_lv16_1 = "1";
const sc_lv<32> tremolo_calculation::ap_const_lv32_5 = "101";
const sc_lv<32> tremolo_calculation::ap_const_lv32_15 = "10101";
const sc_lv<32> tremolo_calculation::ap_const_lv32_1A = "11010";
const sc_lv<32> tremolo_calculation::ap_const_lv32_1B = "11011";
const sc_lv<32> tremolo_calculation::ap_const_lv32_1E = "11110";
const sc_lv<1> tremolo_calculation::ap_const_lv1_0 = "0";
const sc_lv<1> tremolo_calculation::ap_const_lv1_1 = "1";
const sc_lv<16> tremolo_calculation::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<32> tremolo_calculation::ap_const_lv32_16 = "10110";
const sc_lv<32> tremolo_calculation::ap_const_lv32_457A0000 = "1000101011110100000000000000000";
const sc_lv<32> tremolo_calculation::ap_const_lv32_6 = "110";
const sc_lv<16> tremolo_calculation::ap_const_lv16_FA0 = "111110100000";
const sc_lv<32> tremolo_calculation::ap_const_lv32_1 = "1";
const sc_lv<32> tremolo_calculation::ap_const_lv32_2 = "10";
const sc_lv<32> tremolo_calculation::ap_const_lv32_3 = "11";
const sc_lv<32> tremolo_calculation::ap_const_lv32_4 = "100";
const bool tremolo_calculation::ap_const_boolean_1 = true;

tremolo_calculation::tremolo_calculation(sc_module_name name) : sc_module(name), mVcdFile(0) {
    trem_fadd_32ns_32bkb_U2 = new trem_fadd_32ns_32bkb<1,5,32,32,32>("trem_fadd_32ns_32bkb_U2");
    trem_fadd_32ns_32bkb_U2->clk(ap_clk);
    trem_fadd_32ns_32bkb_U2->reset(ap_rst);
    trem_fadd_32ns_32bkb_U2->din0(m_reg_119);
    trem_fadd_32ns_32bkb_U2->din1(ap_var_for_const0);
    trem_fadd_32ns_32bkb_U2->ce(ap_var_for_const1);
    trem_fadd_32ns_32bkb_U2->dout(grp_fu_37_p2);
    trem_fmul_32ns_32cud_U3 = new trem_fmul_32ns_32cud<1,4,32,32,32>("trem_fmul_32ns_32cud_U3");
    trem_fmul_32ns_32cud_U3->clk(ap_clk);
    trem_fmul_32ns_32cud_U3->reset(ap_rst);
    trem_fmul_32ns_32cud_U3->din0(tmp_1_i_reg_124);
    trem_fmul_32ns_32cud_U3->din1(xin);
    trem_fmul_32ns_32cud_U3->ce(ap_var_for_const1);
    trem_fmul_32ns_32cud_U3->dout(grp_fu_42_p2);
    trem_fdiv_32ns_32dEe_U4 = new trem_fdiv_32ns_32dEe<1,16,32,32,32>("trem_fdiv_32ns_32dEe_U4");
    trem_fdiv_32ns_32dEe_U4->clk(ap_clk);
    trem_fdiv_32ns_32dEe_U4->reset(ap_rst);
    trem_fdiv_32ns_32dEe_U4->din0(tmp_i_reg_114);
    trem_fdiv_32ns_32dEe_U4->din1(ap_var_for_const2);
    trem_fdiv_32ns_32dEe_U4->ce(ap_var_for_const1);
    trem_fdiv_32ns_32dEe_U4->dout(grp_fu_48_p2);
    trem_sitofp_32s_3eOg_U5 = new trem_sitofp_32s_3eOg<1,6,32,32>("trem_sitofp_32s_3eOg_U5");
    trem_sitofp_32s_3eOg_U5->clk(ap_clk);
    trem_sitofp_32s_3eOg_U5->reset(ap_rst);
    trem_sitofp_32s_3eOg_U5->din0(grp_fu_53_p0);
    trem_sitofp_32s_3eOg_U5->ce(grp_fu_53_ce);
    trem_sitofp_32s_3eOg_U5->dout(grp_fu_53_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_grp_fu_53_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_53_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mod_r );

    SC_METHOD(thread_return_r);
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_fu_42_p2 );
    sensitive << ( return_r_preg );

    SC_METHOD(thread_return_r_ap_vld);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_tmp_2_i_fu_69_p2);
    sensitive << ( mod_r );
    sensitive << ( control );

    SC_METHOD(thread_tmp_3_i_fu_80_p2);
    sensitive << ( tmp_2_i_fu_69_p2 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_tmp_4_i_fu_86_p2);
    sensitive << ( tmp_2_i_fu_69_p2 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( tmp_3_i_fu_80_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000000000000000001";
    mod_r = "0000000000000000";
    control = "0000000000000001";
    return_r_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "tremolo_calculation_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, return_r, "(port)return_r");
    sc_trace(mVcdFile, return_r_ap_vld, "(port)return_r_ap_vld");
    sc_trace(mVcdFile, xin, "(port)xin");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mod_r, "mod_r");
    sc_trace(mVcdFile, control, "control");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, grp_fu_53_p1, "grp_fu_53_p1");
    sc_trace(mVcdFile, tmp_i_reg_114, "tmp_i_reg_114");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_48_p2, "grp_fu_48_p2");
    sc_trace(mVcdFile, m_reg_119, "m_reg_119");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_37_p2, "grp_fu_37_p2");
    sc_trace(mVcdFile, tmp_1_i_reg_124, "tmp_1_i_reg_124");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, tmp_2_i_fu_69_p2, "tmp_2_i_fu_69_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, tmp_3_i_fu_80_p2, "tmp_3_i_fu_80_p2");
    sc_trace(mVcdFile, tmp_4_i_fu_86_p2, "tmp_4_i_fu_86_p2");
    sc_trace(mVcdFile, grp_fu_42_p2, "grp_fu_42_p2");
    sc_trace(mVcdFile, return_r_preg, "return_r_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_53_p0, "grp_fu_53_p0");
    sc_trace(mVcdFile, grp_fu_53_ce, "grp_fu_53_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

tremolo_calculation::~tremolo_calculation() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete trem_fadd_32ns_32bkb_U2;
    delete trem_fmul_32ns_32cud_U3;
    delete trem_fdiv_32ns_32dEe_U4;
    delete trem_sitofp_32s_3eOg_U5;
}

void tremolo_calculation::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void tremolo_calculation::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void tremolo_calculation::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_457A0000;
}

void tremolo_calculation::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        if (esl_seteq<1,1,1>(tmp_3_i_fu_80_p2.read(), ap_const_lv1_1)) {
            control = ap_const_lv16_FFFF;
        } else if ((esl_seteq<1,1,1>(tmp_3_i_fu_80_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_4_i_fu_86_p2.read(), ap_const_lv1_1))) {
            control = ap_const_lv16_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        return_r_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
            return_r_preg = grp_fu_42_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        m_reg_119 = grp_fu_48_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        mod_r = tmp_2_i_fu_69_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_1_i_reg_124 = grp_fu_37_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_i_reg_114 = grp_fu_53_p1.read();
    }
}

void tremolo_calculation::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void tremolo_calculation::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void tremolo_calculation::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void tremolo_calculation::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void tremolo_calculation::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void tremolo_calculation::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void tremolo_calculation::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void tremolo_calculation::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void tremolo_calculation::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void tremolo_calculation::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void tremolo_calculation::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void tremolo_calculation::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void tremolo_calculation::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void tremolo_calculation::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void tremolo_calculation::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void tremolo_calculation::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void tremolo_calculation::thread_grp_fu_53_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_53_ce = ap_const_logic_1;
    } else {
        grp_fu_53_ce = ap_const_logic_0;
    }
}

void tremolo_calculation::thread_grp_fu_53_p0() {
    grp_fu_53_p0 = esl_sext<32,16>(mod_r.read());
}

void tremolo_calculation::thread_return_r() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        return_r = grp_fu_42_p2.read();
    } else {
        return_r = return_r_preg.read();
    }
}

void tremolo_calculation::thread_return_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        return_r_ap_vld = ap_const_logic_1;
    } else {
        return_r_ap_vld = ap_const_logic_0;
    }
}

void tremolo_calculation::thread_tmp_2_i_fu_69_p2() {
    tmp_2_i_fu_69_p2 = (!control.read().is_01() || !mod_r.read().is_01())? sc_lv<16>(): (sc_biguint<16>(control.read()) + sc_biguint<16>(mod_r.read()));
}

void tremolo_calculation::thread_tmp_3_i_fu_80_p2() {
    tmp_3_i_fu_80_p2 = (!tmp_2_i_fu_69_p2.read().is_01() || !ap_const_lv16_FA0.is_01())? sc_lv<1>(): (sc_bigint<16>(tmp_2_i_fu_69_p2.read()) > sc_bigint<16>(ap_const_lv16_FA0));
}

void tremolo_calculation::thread_tmp_4_i_fu_86_p2() {
    tmp_4_i_fu_86_p2 = (!tmp_2_i_fu_69_p2.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_i_fu_69_p2.read() == ap_const_lv16_0);
}

void tremolo_calculation::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

