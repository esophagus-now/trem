// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tremolo_calculation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        return_r,
        return_r_ap_vld,
        xin
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] return_r;
output   return_r_ap_vld;
input  [31:0] xin;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] return_r;
reg return_r_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] mod_r;
reg   [15:0] control;
reg    ap_block_state1;
wire   [31:0] grp_fu_53_p1;
reg   [31:0] tmp_i_reg_114;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_48_p2;
reg   [31:0] m_reg_119;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_37_p2;
reg   [31:0] tmp_1_i_reg_124;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire   [15:0] tmp_2_i_fu_69_p2;
wire    ap_CS_fsm_state31;
wire   [0:0] tmp_3_i_fu_80_p2;
wire   [0:0] tmp_4_i_fu_86_p2;
wire   [31:0] grp_fu_42_p2;
reg   [31:0] return_r_preg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state7;
wire  signed [31:0] grp_fu_53_p0;
reg    grp_fu_53_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 31'd1;
#0 mod_r = 16'd0;
#0 control = 16'd1;
#0 return_r_preg = 32'd0;
end

trem_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
trem_fadd_32ns_32bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(m_reg_119),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_37_p2)
);

trem_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
trem_fmul_32ns_32cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_i_reg_124),
    .din1(xin),
    .ce(1'b1),
    .dout(grp_fu_42_p2)
);

trem_fdiv_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
trem_fdiv_32ns_32dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_114),
    .din1(32'd1165623296),
    .ce(1'b1),
    .dout(grp_fu_48_p2)
);

trem_sitofp_32s_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
trem_sitofp_32s_3eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_53_p0),
    .ce(grp_fu_53_ce),
    .dout(grp_fu_53_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        return_r_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            return_r_preg <= grp_fu_42_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        if ((tmp_3_i_fu_80_p2 == 1'd1)) begin
                        control[1] <= 1'b1;
            control[2] <= 1'b1;
            control[3] <= 1'b1;
            control[4] <= 1'b1;
            control[5] <= 1'b1;
            control[6] <= 1'b1;
            control[7] <= 1'b1;
            control[8] <= 1'b1;
            control[9] <= 1'b1;
            control[10] <= 1'b1;
            control[11] <= 1'b1;
            control[12] <= 1'b1;
            control[13] <= 1'b1;
            control[14] <= 1'b1;
            control[15] <= 1'b1;
        end else if (((tmp_3_i_fu_80_p2 == 1'd0) & (tmp_4_i_fu_86_p2 == 1'd1))) begin
                        control[1] <= 1'b0;
            control[2] <= 1'b0;
            control[3] <= 1'b0;
            control[4] <= 1'b0;
            control[5] <= 1'b0;
            control[6] <= 1'b0;
            control[7] <= 1'b0;
            control[8] <= 1'b0;
            control[9] <= 1'b0;
            control[10] <= 1'b0;
            control[11] <= 1'b0;
            control[12] <= 1'b0;
            control[13] <= 1'b0;
            control[14] <= 1'b0;
            control[15] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        m_reg_119 <= grp_fu_48_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        mod_r <= tmp_2_i_fu_69_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_1_i_reg_124 <= grp_fu_37_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_i_reg_114 <= grp_fu_53_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1))) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_53_ce = 1'b1;
    end else begin
        grp_fu_53_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        return_r = grp_fu_42_p2;
    end else begin
        return_r = return_r_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        return_r_ap_vld = 1'b1;
    end else begin
        return_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign grp_fu_53_p0 = $signed(mod_r);

assign tmp_2_i_fu_69_p2 = (control + mod_r);

assign tmp_3_i_fu_80_p2 = (($signed(tmp_2_i_fu_69_p2) > $signed(16'd4000)) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_86_p2 = ((tmp_2_i_fu_69_p2 == 16'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    control[0] <= 1'b1;
end

endmodule //tremolo_calculation
